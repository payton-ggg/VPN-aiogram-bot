#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import ChatNotFound
from aiogram import types

#–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from misc import config, misc
from misc import database as db
from misc import keyboard as kb

#–ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º –æ–ø–ª–∞—Ç—ã
from pycrystalpay import CrystalPay
from payment import lolzapi
from pyqiwip2p import AioQiwiP2P

storage = MemoryStorage()
bot=Bot(config.bot_token, parse_mode=types.ParseMode.HTML)
dp=Dispatcher(bot, storage=storage)

lolz = lolzapi.LolzteamApi(config.lolz_api[0], config.lolz_api[1])
crystal_pay = CrystalPay(config.crystal_pay[0],config.crystal_pay[1])
p2p = AioQiwiP2P(auth_key=config.qiwi_key)

db.create_tables()
misc.clear()

#–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π—Ç–æ–≤
class st(StatesGroup):
    users_control_input = State()

    new_admin_id_input = State()
    cancell_admin = State()

    help_user = State()
    help_admin = State()

    mailing = State()

    act_promo = State()

    add_promo_p1 = State()
    add_promo_p2 = State()
    add_promo_p3 = State()

    add_funds = State()

    settings = State()

    add_server_p1 = State()
    add_server_p2 = State()

    change_bal = State()

#–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"], chat_type=["private"])
async def star(message: types.Message):
    cmd=message.text.split()
    try:
        if len(cmd) == 1:
            if await db.get_user_info(message.chat.id) is None:
                await db.save_user_info(message.chat.id)
        elif len(cmd) == 2:
            if await db.get_user_info(message.chat.id) is None:
                await db.save_user_info(message.chat.id,cmd[1])
                await bot.send_message(cmd[1], f"@{message.from_user.username} —Ç–≤–æ–π –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª.üòç")
    except: pass
    else:
        blocked= await db.get_user_info(int(message.from_user.id)); blocked=blocked[5]
        if not blocked:
            adm = await db.get_user_info(message.chat.id)
            if adm[4]: await message.answer(f'ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b> —Å–ª–∏—Ç –≤ @end_soft', reply_markup=kb.main_admin_markup())
            else: await message.answer(f'ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b> —Å–ª–∏—Ç –≤ @end_soft', reply_markup=kb.main_user_markup())
        else: await message.answer("<b>–¢—ã –∑–∞–±–∞–Ω–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.</b> —Å–ª–∏—Ç –≤ @end_soft") 

#–•–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–ª-–¥–∞—Ç—ã
@dp.callback_query_handler()
async def close_update(call: types.CallbackQuery, state: FSMContext):
    try: 
        if "add_funds" not in call.data: await call.message.delete()
    except: 
        pass
    #–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    if "ignor" in call.data:
        raw = call.data.split("|")
        await call.message.answer("<b>üëé –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>")
        await bot.send_message(raw[1], "<b>‚ùó –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—å—è—Å–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</b>")
    elif "block" in call.data:
        raw = call.data.split("|")
        await db.ban(raw[1], 1)
        await call.message.answer("üëç<b> –ó–∞–±–∞–Ω–∏–ª</b>")
        await bot.send_message(raw[1], "üò°<b> –¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω</b>")
    elif "help" in call.data:
        raw = call.data.split("|")
        await call.message.answer("<b>‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä—É</b>")
        await st.help_admin.set()
        await state.update_data(padmin=call.from_user.id)
        await state.update_data(uid=raw[1])
    elif "unb_lock" in call.data:
        raw = call.data.split("|")
        user_info = await db.get_user_info(raw[1])
        if user_info[5]:
            await db.ban(raw[1], 0)
            await call.message.answer("üëç<b> –†–∞–∑–±–∞–Ω–∏–ª</b>")
            await bot.send_message(raw[1], "<b>üòò –¢—ã –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>")
        else:
            await call.message.answer("‚ùï <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω</b>")
    elif "promo" in call.data:
        raw = call.data.split("|")
        promo_info = await db.get_promo_info(raw[1])
        text = f"Id: {promo_info[0]}\n–ü—Ä–æ–º–æ–∫–æ–¥: {promo_info[1]}\n–°—É–º–º–∞: {promo_info[2]}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {promo_info[3]}"
        await call.message.answer(text, reply_markup=kb.delete_promo_markup(raw[1]))
    elif "do_prm" in call.data:
        raw = call.data.split("|")
        promo = raw[2]
        do=raw[1]
        match do:
            case "delete":
                await db.delete_promo(promo)
                await call.message.answer(f"–ì–æ—Ç–æ–≤–æ, –ø—Ä–æ–º–æ–∫–æ–¥ <b>{promo}</b> —É–¥–∞–ª–µ–Ω.")
    elif "server_info" in call.data:
        raw = call.data.split("|")
        info = await db.get_server(int(raw[1]))
        text = f"üÜîId: {info[0]}\nüìõ–ù–∞–∑–≤–∞–Ω–∏–µ: {info[1]}\n‚òÅIp: {info[2]}"
        await call.message.answer(text,reply_markup=kb.delete_server_markup(raw[1]))
    elif "del_server" in call.data:
        raw = call.data.split("|")
        server_info = await db.get_server(int(raw[1]))
        await db.delete_server(int(raw[1]))
        await call.message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ, —Å–µ—Ä–≤–µ—Ä <b>{server_info[1]}</b> —É–¥–∞–ª–µ–Ω.")
    elif "change_bal" in call.data:
        row = call.data.split("|")
        await call.message.answer("–í–≤–µ–¥–∏ –±–∞–ª–∞–Ω—Å")
        await st.change_bal.set()
        await state.update_data(case=row[1])
    elif "clear_stat" in call.data:
        await db.clear_stat()
        await call.message.answer("‚úÖ<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–Ω–∞.</b>")

    #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if "act_prm" in call.data:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
        await st.act_promo.set()
    elif "api_menu" in call.data:
        api_key = await db.get_user_info(call.from_user.id); api_key=str(api_key[6]).replace("None", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        text=f'‚öô <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API</b>\nüîª–í–∞—à –∫–ª—é—á: <span class="tg-spoiler"><b>{api_key}</b></span>'
        await call.message.answer(text,reply_markup=kb.api_menu(call.from_user.id, "https://google.com"))
    elif "api_do" in call.data:
        raw=call.data.split("|")
        do=raw[1]
        data=raw[2]
        match do:
            case "gen":
                key=misc.generate_api_key()
                await db.update_key(call.from_user.id, key)
                await call.message.answer(f'<i>–ì–æ—Ç–æ–≤–æ, –≤–∞—à –∫–ª—é—á API:</i> <span class="tg-spoiler"><b>{key}</b></span>')
            case "del":
                await db.update_key(call.from_user.id)
                await call.message.answer("<b>‚úÖ –ì–æ—Ç–æ–≤–æ, –≤–∞—à API-–∫–ª—é—á —Å–±—Ä–æ—à–µ–Ω, –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é.</b>")
    elif "add_funds" in call.data:
        raw = call.data.split("|")
        match raw[1]:
            case "":
                await call.message.delete()
                await call.message.answer("üí∞ <i>–í–≤–µ–¥–∏ —Å—É–º–º—É.</i>")
                await st.add_funds.set()
            case "qiwi":
                match raw[2]:
                    case "0":
                        await call.message.delete()
                        summ = int(raw[3])
                        bill = await p2p.bill(amount=summ, lifetime=20)
                        await call.message.answer("ü•ù <i>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∏–≤–∏</i>", reply_markup=kb.add_funds_qiwi_markup(bill.pay_url, bill.bill_id, summ))
                    case "1":
                        id = raw[4]
                        summ = raw[3]
                        status = await p2p.check(bill_id=id); status = status.status
                        if status == "PAID":
                            await call.message.delete()
                            await call.message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {misc.beauty_int(summ)} RUB.")
                            balance = await db.get_user_info(call.from_user.id); balance = balance[1]
                            new_balance = int(summ) + balance
                            await db.write_balance(new_balance, call.from_user.id)
                            inviter = await db.get_inviter(call.message.from_user.id)
                            if inviter != None:
                                inviter_bal = await db.get_user_info(inviter)
                                percentage = float(summ)/float(10)
                                new_inviter_bal=inviter_bal[1]+percentage
                                await db.write_balance(round(new_inviter_bal), inviter)
                                await bot.send_message(inviter, f"–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ªüë§, —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—Éüõí.\n–¢–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: {misc.beauty_int(round(percentage))}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{misc.beauty_int(round(new_inviter_bal))}</b>")
                        else:
                            await bot.answer_callback_query(call.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µüôè, –Ω–æ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω‚ùå, –µ—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø–∏—à–∏—Ç–µ –≤ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
                    case "2":
                        await call.message.delete()
                        id = raw[3]
                        await p2p.reject(bill_id=id)
                        await call.message.answer("‚ùå <b>–°—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω</b>")
            case "crystal":
                match raw[2]:
                    case "0":
                        await call.message.delete()
                        summ = int(raw[3])
                        new_bill = crystal_pay.create_invoice(summ)
                        await call.message.answer("üîÆ <i>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏—Å—Ç–∞–ª –ø–µ–π</i>", reply_markup=kb.add_funds_crystal_markup(new_bill.url, summ, new_bill.id))
                    case "1":
                        summ = raw[3]
                        status=crystal_pay.construct_payment_by_id(raw[4]).if_paid()
                        if status:
                            await call.message.delete()
                            await call.message.answer(f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b> –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {misc.beauty_int(summ)} RUB.")
                            balance = await db.get_user_info(call.from_user.id); balance = balance[1]
                            new_balance = int(summ) + balance
                            await db.write_balance(new_balance, call.from_user.id)
                            inviter = await db.get_inviter(call.message.chat.id)
                            if inviter != None:
                                inviter_bal = await db.get_user_info(inviter)
                                percentage = float(summ)/float(10)
                                new_inviter_bal=inviter_bal[1]+percentage
                                await db.write_balance(round(new_inviter_bal), inviter)
                                await bot.send_message(inviter, f"–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ªüë§, —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—Éüõí.\n–¢–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: {misc.beauty_int(round(percentage))}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{misc.beauty_int(round(new_inviter_bal))}</b>")
                        else:
                            await bot.answer_callback_query(call.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µüôè, –Ω–æ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω‚ùå, –µ—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø–∏—à–∏—Ç–µ –≤ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
            case "lolz":
                match raw[2]:
                    case "0":
                        comment = misc.comment_generation(call.message.from_user.id)
                        await call.message.delete()
                        pay_url=f"https://lolz.guru/market/balance/transfer?username={config.lolz_api[2]}&amount={raw[3]}&comment={comment}"
                        await call.message.answer("–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ!\n<b>–í–∞–∂–Ω–æ!</b>\n<i>–ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º—ã, –ª–∏–±–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –±–∞–ª–∞–Ω—Å –Ω–µ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.</i>", reply_markup=kb.add_funds_lolz_markup(pay_url, comment, raw[3]))
                    case "1":
                        summ = int(raw[3])
                        comment = raw[4]
                        check_paym=lolz.market_payments(type_='income', pmin=comment, pmax=comment, comment=comment)["payments"]
                        if check_paym:
                            await call.message.delete()
                            await call.message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{misc.beauty_int(summ)} RUB</b>.")
                            balance = await db.get_user_info(call.from_user.id); balance = balance[1]
                            new_balance = summ + balance
                            await db.write_balance(new_balance, call.from_user.id)
                            inviter = await db.get_inviter(call.message.chat.id)
                            if inviter != None:
                                inviter_bal = await db.get_user_info(inviter)
                                percentage = float(summ)/float(10)
                                new_inviter_bal=inviter_bal[1]+percentage
                                await db.write_balance(round(new_inviter_bal), inviter)
                                await bot.send_message(inviter, f"–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ªüë§, —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—Éüõí.\n–¢–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: {misc.beauty_int(round(percentage))}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{misc.beauty_int(round(new_inviter_bal))}</b>")
                        else:
                            await bot.answer_callback_query(call.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µüôè, –Ω–æ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω‚ùå, –µ—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø–∏—à–∏—Ç–µ –≤ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
    elif "byu_cfg" in call.data:
        raw = call.data.split("|")
        match raw[1]:
            case "0":
                await call.message.answer("<i>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</i>...", reply_markup=kb.days_choice_markup(raw[2]))
            case "1":
                one_cfg_summ = await db.get_one_summ()
                summ = (float(raw[4])) * one_cfg_summ
                loc = await db.get_server(raw[2].replace("loc", "")); loc = loc[1]
                balance = await db.get_user_info(int(call.from_user.id)); balance = balance[1]
                await call.message.answer(f"–õ–æ–∫–∞—Ü–∏—è: {loc}\n–°—É–º–º–∞: {misc.beauty_int(int(summ))} RUB\n–ü–µ—Ä–∏–æ–¥: {raw[3]} –î–Ω–µ–π\n–ë–∞–ª–∞–Ω—Å: <b>{misc.beauty_int(balance)} RUB</b>",reply_markup=kb.pay_markup(int(summ), raw[2], raw[3]))
            case "2":
                loc = await db.get_server(raw[3].replace("loc", ""))
                summ = int(raw[2])
                period = raw[4]
                balance = await db.get_user_info(call.from_user.id); balance = balance[1]
                if balance >= summ:
                    await db.write_payment_info(summ, call.from_user.id, raw[3])
                    await call.message.answer("‚úÖ–£—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞.")
                    new_bal = balance - summ
                    await db.write_balance(new_bal, call.from_user.id)
                    file=misc.generate_config(call.from_user.id, period, loc).split("/")[2]
                    otzv = types.InlineKeyboardMarkup()
                    otzv.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", url=config.lolz_theme))
                    await call.message.answer_document(open(file, "rb"), caption="‚úÖ–£—Å–ø–µ—à–Ω–æ\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å! –ï—Å–ª–∏ –≤—ã —á–∏—Ç–∞–µ—Ç–µ —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ –≤—ã –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º.\n\n<i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–¥–µ–ª–∞–Ω–∞ –¥–ª—è –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–Ω–∞—é—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ OpenVpn.</i>\n1)–°–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç OpenVpn - https://openvpn.net/community-downloads/\n2)–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç OpenVpn\n3)–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç—Ä–µ–π (—Å—Ç—Ä–µ–ª–æ—á–∫–∞, –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É), –≤—ã–±–µ—Ä–µ—Ç–µ –∑–Ω–∞—á–µ–∫ OpenVpn, –¥–∞–ª–µ–µ –ø—É–Ω–∫—Ç –ò–º–ø–æ—Ä—Ç - –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞–∂–¥—ã –Ω–∞ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∫—É–ø–∏–ª–∏.\n–ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è.\nBingo!, –≤–ø–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!",reply_markup=otzv)
                    misc.delete(file)
                else:
                    na = summ - balance
                    await call.message.answer(f"‚ùå–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ <b>{misc.beauty_int(na)} RUB</b>", reply_markup=kb.profile_markup())
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message_handler(content_types=["text"], chat_type=["private"])
async def text(message: types.Message, state: FSMContext):
    adm = await db.get_user_info(message.chat.id)
    if not adm[5]:
        #–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        if ("–ê–¥–º–∏–Ω–∫–∞" in message.text) and (adm[4]):
            await message.answer("üëë–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_keyboard())
        elif ("–ù–∞–∑–∞–¥" in message.text) and (adm[4]):
            await message.answer(f'ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>{message.from_user.first_name}</b>', reply_markup=kb.main_admin_markup())
        elif ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in message.text) and (adm[4]):
            users = await db.count_all_users()
            byus = await db.count_buys()
            pay_summ=await db.payments_summ()
            servers = await db.get_servers()
            bs = ""
            for x in servers:
                buys = await db.count_where_buys(f"loc{x[0]}")
                bs+=f"{x[1]}(–ü–æ–∫—É–ø–æ–∫) - {buys}\n"
            text=f"üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nüë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:{users}\nüßÆ–ü–æ–∫—É–ø–æ–∫(–í—Å–µ –≤—Ä–µ–º—è):{byus}\nüí∞–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫(–í—Å–µ –≤—Ä–µ–º—è):{misc.beauty_int(pay_summ)} RUB\n{bs}"
            await message.answer(text, reply_markup=kb.statistics_keyboard())
        elif ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" in message.text) and (adm[4]):
            await message.answer("üÜî <b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>", reply_markup=kb.back_markup())
            await st.users_control_input.set()
        elif ("–û–±—Ä–∞—Ç–Ω–æ" in message.text) and (adm[4]):
            await message.answer("üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>", reply_markup=kb.admin_keyboard())
        elif ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏" in message.text) and (adm[4]):
            await message.answer("üóø <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>", reply_markup=kb.edit_admins())
        elif ("–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É" in message.text) and (adm[4]):
            await message.answer("üÜî <b>–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.</b>")
            await st.new_admin_id_input.set()
        elif ("–ó–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É" in message.text) and (adm[4]):
            await message.answer("üÜî <b>–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.</b>")
            await st.cancell_admin.set()
        elif ("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤" in message.text) and adm[4]:
            text="Id - –ë–∞–ª–∞–Ω—Å\n"
            admins=await db.admin_list()
            for i in admins:
                id=i[0]
                bal=i[1]
                text+=f"{id} - {bal}\n"
            await message.answer(text)
        elif ("–†–∞—Å—Å—ã–ª–∫–∞" in message.text) and (adm[4]):
            await message.answer("‚úè <b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>", reply_markup=kb.back_markup())
            await st.mailing.set()
        elif ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏" in message.text) and adm[4]:
            all_promos = await db.get_all_promos()
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            if len(all_promos) > 0:
                for i in all_promos:
                    keyboard.add(
                        types.InlineKeyboardButton(f"‚î†{i[1]}", callback_data=f"promo|{i[1]}")
                        )
            else:
                keyboard.add(
                        types.InlineKeyboardButton("üò¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data=f"no_prms")
                        )
            await message.answer("üôä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</b>", reply_markup=keyboard)
        elif ("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥" in message.text) and adm[4]:
            await message.answer("üôà <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b>")
            await st.add_promo_p1.set()
        elif ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º" in message.text) and adm[4]:
            await message.answer("üß™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º</b>", reply_markup=kb.project_control())
        elif ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏" in message.text) and adm[4]:
            await message.answer("üì∂ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>", reply_markup=kb.server_control_markup())##
        elif ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞" in message.text) and adm[4]:
            await message.answer("‚öô <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>", reply_markup=kb.settings())##
        elif ("–ò–∑–º–µ–Ω–∏—Ç—å" in message.text) and adm[4]:
            raw = message.text.split()
            match raw[1]:
                case "—Ü–µ–Ω—É":
                    await message.answer("üè¶ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É.</b>")
                    await st.settings.set()
                    await state.update_data(case="price")
        elif ("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤" in message.text) and adm[4]:
            servers = await db.get_servers()
            keyboard = types.InlineKeyboardMarkup()
            for i in servers:
                keyboard.add(types.InlineKeyboardButton(f"{i[1]}", callback_data=f"server_info|{i[0]}"))
            await message.answer("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", reply_markup=keyboard)
        elif ("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä" in message.text) and adm[4]:
            await message.answer("üìõ<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.</b>")
            await st.add_server_p1.set()

        #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if "–ü—Ä–æ—Ñ–∏–ª—å" in message.text:
            username=message.from_user.username
            balance =  await db.get_user_info(message.from_user.id)
            admin = str(balance[5]).replace("0", "–ù–µ –∑–∞–±–∞–Ω–µ–Ω").replace("1", "–ó–∞–±–∞–Ω–µ–Ω")
            bot_username = await bot.get_me()
            ref_link=f"https://t.me/{bot_username.username}?start={message.chat.id}"
            text=f"üö©–ü—Ä–æ—Ñ–∏–ª—å\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüë§–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\nüí∏–ë–∞–ª–∞–Ω—Å: {misc.beauty_int(balance[1])} RUB\n–°—Ç–∞—Ç—É—Å: {admin}\nüîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}"
            await message.answer(text, reply_markup=kb.profile_markup())
        elif "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞" in message.text:
            await message.answer("<b>‚ùó –ü—Ä–∞–≤–∏–ª–∞</b>\n\n1Ô∏è‚É£.–ü–æ–¥–¥–µ—Ä–∂–∫–∞\n  <i><b>‚Ññ1.1</b>-–ö–∞–∂–¥–æ–º—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º, –ª–∏–±–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –æ–±—è–∑–∞–Ω–∞ –≤—ã–¥–∞—Ç—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. </i>\n  <i><b>‚Ññ1.2</b>-–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–∫–∞–∑ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏ (—Å–º. –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1.1)</i>\n  <i><b>‚Ññ1.3</b>-–í —Å–ª—É—á–∞–µ –ø–ª–æ—Ö–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç–∞–º —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–∫–∞–∑ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏ (—Å–º. –ø—Ä–∞–≤–∏–ª–æ ‚Ññ1.1)</i>\n\n2Ô∏è‚É£.–ó–∞–ø—Ä–µ—Ç—ã\n<b>–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª, –º—ã –∏–º–µ–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –∏–∑—å—è—Ç–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤.</b>\n  <i><b>‚Ññ2.1</b>-–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥—ã—Ä —Ä–∞–¥–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã.</i>\n  <i><b>‚Ññ2.2</b>-–ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–º—ã—à–ª–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ip –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —á—Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.</i>\n  <i><b>‚Ññ2.3</b>-–ó–∞–ø—Ä–µ—â–µ–Ω—ã DDOS-–∞—Ç–∞–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–∏—Ö ip –∞–¥—Ä–µ—Å–æ–≤.</i>\n  <i><b>‚Ññ2.4</b>-–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞–¥–∏ —Å–∫—Ä—ã—Ç–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Å—Ç—Ä–∞–Ω –°–ù–ì.</i>\n\n3Ô∏è‚É£.–¢–æ–≤–∞—Ä\n  <i><b>‚Ññ3.1</b>-–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</i>\n  <i><b>‚Ññ3.2</b>-–ü—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–µ–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–¥–∞—Ç—å –≤–∞–º —Ä–∞–±–æ—á–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –∑–∞–º–µ–Ω—É, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å –≤–∞–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞.</i>\n\n4Ô∏è‚É£.–ü–æ–æ—â—Ä–µ–Ω–∏—è\n  <i><b>‚Ññ4.1</b>-–ó–∞ –ª—é–±–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.</i>")
        elif "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" in message.text:
            await message.answer("<b>‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>")
            await st.help_user.set()
        elif "–ö—É–ø–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥" in message.text:
            data_for_kb = []
            servers = await db.get_servers()
            for i in servers:
                data_for_kb.append([i[1], i[0]])
            await message.answer("üó∫ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</b>", reply_markup=kb.loc_choice_markup(data_for_kb))
    else:
        await message.answer("<b>–¢—ã –∑–∞–±–∞–Ω–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.</b>")

@dp.message_handler(state=st.change_bal, content_types=["text"])
async def change_bal(message: types.Message, state: FSMContext):
    balance = message.text
    data = await state.get_data()
    user = data.get("case")
    await db.write_balance(int(balance), user)
    await message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ, –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user}</b> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{balance}</b>.")
    await state.finish()

@dp.message_handler(state=st.add_server_p1, content_types=["text"])
async def add_server_p1(message: types.Message, state: FSMContext):
    text = message.text
    await state.finish()
    await message.answer("üìä<b>–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b>\n<i>Ip:–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:–ü–∞—Ä–æ–ª—å</i>")
    await st.add_server_p2.set()
    await state.update_data(name=text)

@dp.message_handler(state=st.add_server_p2, content_types=["text"])
async def add_server_p1(message: types.Message, state: FSMContext):
    server_data = message.text.split(":")
    data = await state.get_data()
    name = data.get("name")
    await state.finish()
    ip = server_data[0]
    username = server_data[1]
    paswd = server_data[2]
    await db.add_server(name, ip, username, paswd)
    await message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ, —Å–µ—Ä–≤–µ—Ä <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω.")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message_handler(state=st.settings, content_types=["text"])
async def settings(message: types.Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    cas = data.get("case")
    await state.finish()
    match cas:
        case "price":
            await db.set_price(int(text))
            await message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–æ–Ω—Ñ–∏–≥: <b>{text}</b>")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=st.act_promo, content_types=["text"])
async def promo(message: types.Message, state: FSMContext):
    promo=message.text
    promoinf = await db.get_promo_info(promo)
    if promoinf:
        if promoinf[3] > 0:
            user_info = await db.get_user_info(message.from_user.id)
            if user_info[2] != None: early_activated = user_info[2]
            else: early_activated = ""
            act_promos = early_activated.split("|")
            if promo not in act_promos:
                userbalance = user_info[1]
                new_user_balance = userbalance + promoinf[2]
                act_count=promoinf[3]
                act_count-=1
                pr=f"{early_activated}{promo}|"
                await db.write_balance(new_user_balance, message.from_user.id)
                await db.write_act_count(act_count,promo)
                await db.write_act_promos(pr, message.from_user.id)
                await message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ, –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–π–¥–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{misc.beauty_int(new_user_balance)}</b>")
            else:
                await message.answer("‚ùå–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        else:
            await message.answer("‚ùå–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.")
    else:
        await message.answer("‚ùå–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=st.add_funds, content_types=["text"])
async def add_funds(message: types.Message, state: FSMContext):
    summ = message.text
    await message.answer("ü§î <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å</b>", reply_markup=kb.payment_service_markup(summ, "0"))
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ß–ê–°–¢–¨ 1
@dp.message_handler(state=st.add_promo_p1, content_types=["text"])
async def promo_p1(message: types.Message, state: FSMContext):
    promo = message.text
    await state.finish()
    await message.answer("üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b>")
    await st.add_promo_p2.set()
    await state.update_data(promo=promo)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ß–ê–°–¢–¨ 2
@dp.message_handler(state=st.add_promo_p2, content_types=["text"])
async def promo_p2(message: types.Message, state: FSMContext):
    try:
        summ = int(message.text)
    except ValueError:
        await message.answer("‚òπ <b>–¢—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ, –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.</b>")
        await state.finish()
    else:
        data = await state.get_data()
        promo=data.get("promo")
        await state.finish()
        await message.answer("‚ôæ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>")
        await st.add_promo_p3.set()
        await state.update_data(promo=promo, summ=summ)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ß–ê–°–¢–¨ 3
@dp.message_handler(state=st.add_promo_p3, content_types=["text"])
async def promo_p2(message: types.Message, state: FSMContext):
    try:
        act_count = int(message.text)
    except ValueError:
        await message.answer("‚òπ <b>–¢—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ, –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.</b>")
        await state.finish()
    else:
        data = await state.get_data()
        promo=data.get("promo")
        summ=data.get("summ")
        await state.finish()
        await db.create_promo(promo, summ, act_count)
        await message.answer("‚úÖ<b>–£—Å–ø–µ—à–Ω–æ</b>")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –°–¢–û–†–û–ù–ê –Æ–ó–ï–†–ê
@dp.message_handler(state=st.help_user, content_types=["text"])
async def to_admin(message: types.Message, state: FSMContext):
    text = f"‚ùî <b>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b>\n<b>–û—Ç: </b>{message.from_user.mention}\n<b>üÜîID: {message.from_user.id}</b>\n\n{message.text}"
    await bot.send_message(config.group_id, text, reply_markup=kb.help_markup(message.from_user.id))
    await message.answer(f"<b>‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–µ!</b>")
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –°–¢–û–†–û–ù–ê –ê–î–ú–ò–ù–ê
@dp.message_handler(state=st.help_admin, content_types=["text"])
async def to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    admin_id=data.get("padmin")
    if message.from_user.id == admin_id:
        text=f"ü•≥ <b>–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n {message.text}"
        id = data.get("uid")
        await bot.send_message(id, text)
        await message.answer("‚úÖ <b>–û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!</b>")
        await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=st.mailing, content_types=["text"])
async def mailing(message: types.Message, state:FSMContext):
    text=message.text
    if "–û–±—Ä–∞—Ç–Ω–æ" not in text:
        await state.finish()
        await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É", reply_markup=kb.admin_keyboard())##
        users = await db.all_userids()
        sended=0
        non_sended=0
        for i in users:
            try: await bot.send_message(i[0], text)
            except: non_sended+=1
            else: sended+=1
        await message.answer(f"üìç <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!</b>\n\nüü¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sended}\nüî¥ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {non_sended}")
    else:
        await message.answer("üëë–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_keyboard())

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω–∫–∏
@dp.message_handler(state=st.new_admin_id_input, content_types=["text"])
async def new_admin(message: types.Message, state: FSMContext):
    id=message.text
    user_info = await db.get_user_info(id)
    if user_info:
        if not user_info[4]:
            await message.answer("üëå<b> –û–∫</b>")
            await db.set_admin(id, 1)
        else:
            await message.answer("<b>‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω</b>")
    else:
        await message.answer("<b>ü§î –¢–∞–∫–æ–≥–æ –∞–π–¥–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>")
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–∫–∏
@dp.message_handler(state=st.cancell_admin, content_types=["text"])
async def cancell_admin(message: types.Message, state: FSMContext):
    id=message.text
    user_info = await db.get_user_info(id)
    if user_info:
        if user_info[4]:
            await message.answer("üëå<b> –û–∫</b>")
            await db.set_admin(id, 0)
        else:
            await message.answer("<b>‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω</b>")
    else:
        await message.answer("<b>ü§î –¢–∞–∫–æ–≥–æ –∞–π–¥–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>")
    await state.finish()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–∑–µ—Ä–µ
@dp.message_handler(state=st.users_control_input, content_types=["text"])
async def users_control(message: types.Message, state: FSMContext):
    userid=message.text
    adm = await db.get_user_info(message.chat.id)
    if "–û–±—Ä–∞—Ç–Ω–æ" not in userid:
        user_info = await db.get_user_info(userid)
        if user_info != None:
            activated_pormos = str(user_info[2]).replace("None", "–ù–µ—Ç")
            inviter = str(user_info[3]).replace("None", "–ù–µ—Ç")
            blocked = str(user_info[5]).replace("0", "–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω").replace("1", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            admin = str(user_info[4]).replace("0", "–ù–µ—Ç").replace("1", "–î–∞")
            await message.answer(f"üëÅÔ∏è‚Äçüó®Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\nüÜî <b>ID:</b>{user_info[0]}\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>{misc.beauty_int(user_info[1])}\nüè∑ <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: </b>{activated_pormos}\nüëª <b>–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π: </b>{inviter}\nüßê <b>–°—Ç–∞—Ç—É—Å: </b>{blocked}\nüòé <b>–ê–¥–º–∏–Ω: </b>{admin}", reply_markup=kb.change_user_balance_markup(userid))
        else:
            await message.answer("‚ùå–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=kb.admin_keyboard())
    else:
        if adm[4]:
            await message.answer(f'ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>{message.from_user.username}</b>', reply_markup=kb.main_admin_markup())
        else:
            await message.answer(f'ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>{message.from_user.username}</b>', reply_markup=kb.main_user_markup())
    await state.finish()

#Ifmain –ó–∞–ø—É—Å–∫ –ø—É–ª–∏–Ω–≥–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
